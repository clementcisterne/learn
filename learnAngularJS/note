AngularJS

	
// Partie 1 : Introduction

	Conclusion

		- NPM est un gestionnaire de paquets qui pertmet de gérer les dépendances côté serveur.
		  Le fichier package.json permet de décrire les dépendances de l'application.
		  L'ensemble des dépendances sont installées dans le répertoire note_modules.

		- Bower est un gestionnaire de paquets qui vous permet de gérer vos dépendances côté client.
		  Le fichier bower.json permet de décrire les dépendances. 
		  C'est dépendances sont installées dans le répertoire bower_components.

		- Grunt est un "task Runner" utilisé pour automosatiser les tâches comme le build, le test et le lancement de votre application.
		  Grunt fonctionne en collaboration avec karma afin de lancer automatiquement les test.

		- Teoman permet de créer la structure de votre application et fonctione en collaboration avec Bower et Grunt.
		  N'oubliez pr d'installer les générateurs en relation avec le type d'application que vous souhaitrez développer.
		  Il en existe beaucoup. Voici une image qui pourreé-vous aider dans votre recherche : http://yeoman.io/generators/


// Partie 2 le concept en détail
	
	1. le modèle MVC
		
		Un peu de code html :
			<!doctype html>
			<html>
			    <head>
			        <title></title>
			    </head>
			    <body>
			        <section ng-controller="headerCtrl">
			            <h1>HEADER</h1>
			        </section>
			        <section ng-controller="menuCtrl">
			            <h1>MENU</h1>
			        </section>
			        <section ng-controller="contentCtrl">
			            <h1>CONTENT</h1>
			        </section>
			        <section ng-controller="footerCtrl">
			            <h1>FOOTER</h1>
			        </section>
			    </body>
			</html>


		Et voici le code javacript associé :

			var app = angular.module("app", []);

			app.controller("headerCtrl", function($scope){
			    //...    
			});

			app.controller("footerCtrl", function($scope){
			    //...    
			});

			app.controller("menuCtrl", function($scope){
			    //...    
			});

			app.controller("contentCtrl", function($scope){
			    //...    
			});


	2. La notion de data-binding
		
		Il s'agit d'un moyen de lier la partie vue à la partie logique. 
		En d'autres termes, grâce à cela, les éléments de votre code HTML seront liés à votre contrôleur JavaScrip 

		Voir des exemples : 
			- http://jsfiddle.net/6nwL3r1t/6/
			- http://jsfiddle.net/7sh8a9oz/


		Conclusion
			
			Prenez conscience que le data-binding est un concept clé de ce framework. 
			Vous verrez sa puissance au fur et a mesure de son utilisation. 
			Le plus c'est de changer sa façon de penser.
			Ne plus agir directement avec le DOM est quelquechose de compliqué à assimiler.
			Le data-binding est un peu ce que sont les pointeurs pour le langage C
			Ils sont partout et il est important de les comprendre avec de poursuivre.
			
			AngularJS pratique ce que l'on appelle le "two-way data binding". 
			En d'autres termes, il s'agit d'un data-binding bidirectionnel. 
			Ainsi, grâce à cette technique, lorsque vous ferez des actions sur votre page HTML, 
			les variables dans votre JavaScript se mettront à jour et vice-versa : 
			lorsque vous changerez vos variables dans votre JavaScript, les répercussions sur la vue seront immédiates.


	3. L'injection de dépendances 

		Au même titre que le data-binding, l'injection de dépendances est un concept cél lorsque vous développez avec AngularJS.
		Angular n'est pas le seul framework à utiliser ce système, c'est le cas de Synmphony2.

		Dans la théorie, l'injection de dépendances permet à des modules de ne pas se soucier de l'instanciation des modules dont ils dépendent. Il suffit d'appeler les dépendances et Angular se charge de les instancier et de les injecter pour nous.


		- L'exemple de $scope

			Angular possède nativement un certain nnombre de modules comme $scope, $location ..
			Ces modules sont tous précédé par un $, c'est une convention pour dire qu'il s'agit de module natifs à Angular.
			Nous verrons qu'il est possible de développer nos propres modules, et il sera déconseillé de suivre la même convention.

		- A quoi ça sert ?

			- La simplicité: vous n'avez plus à vous soucier de l'instanciation des modules. 
			  Cela suit le principre de "least knowledge": lorsque que vous développez, vous n'avez pas envie de vous soucier des autres composants, mais jsute les utiliser.

			- la fiabilité: Lorsque votre module est chargé, vous avez la certitude que toutes ses dépendances sont chargées et que
			  vous avez la possibilité de les utiliser.

			- la réutilisabilité: Nous verrons lorsque nous aborderons la partie des services, mais il s'agit d'un point important.
			  Lorque vous développez des services permetta
			  nt par exemple de faire des conversions de dates, il y a fort à parier que vous souhaireriez pouvoir réutiliser ce module dans d'autre projets.
			  L'injection de dépendances permet donc d'inciter les dévelppeurs à créer de petits modules unitaires et à les assembler par la suite pour créer des systemes plus conséquent.	

			- Les tests: C'est un point extrèmement important. Si le module que vous souhaitez tester possède 10 dépendances, il est
			  assez embetant d'avoir à instancier les 10 modules afin de pourvoir juste tester notre module.
			  A la place, nous allons dire au systeme d'utiliser des mocks (des bouchons) qui vont se comporter comme nos dépendances.


		- Pour finir
		
			L'injection de dépendances constitue un patron de conception assez complexe. Je vous incite à vous docuemneter sur le concept. Voici un lien intéressant : http://www.martinfowler.com/articles/injection.html


			Je veux juste que vous sachiez que Angular exploite largement ce concept. Il n'est pas nécessaire de comprendre précisément le fonctionnement du service d'injection de dépendances, mais sachez que cela existe et que les commodités offertes par le framework ne sont pas magiques.


	4. $scope et $watch

		Nous avons étudié le data-binding et l'injection de dépendances. désormais, nous possèdons toutes les billes pour rentrer dans les méandres d'Angular. Je vous propose d'étudier l'utilité d'une dépendance très importante : $scope

		- $scope

			Appuyons-nous sur le code suivant :

				HTML :
				
				<div ng-app="app">
				    <div ng-controller="exempleCtrl">
				       HELLO {{name}}!
				    </div>
				</div>


				JS :

				var app = angular.module("app", []);

				app.controller("exempleCtrl", function($scope) {
				    $scope.name = "World"
				});


			Comme vous pouvez le constater, $scope constitue une dépendance de notre controller. Il s'agit du mécanisme couramment utilisé par Angular afin d'exposer le modèle à la vue.
			En d'autres termes, le data-biding se fait grâce à l'objet $scope.

			Toute donnée qui n'est pas attachée à $scope n'appartient pas au modèle et ne peut donc pass être exposée à la vue !

			Voyez vraiment ce $scope comme le contexte courant dans lequel vous pouvez agir. Chaque contrôleur possèdera son propre objet $scope et donc son propre contexte.

			Il est parfois nécessaire d'accéder à d'autres contexte que le sien. En effet, lorsque vous êtes dans vôtre contrôleur, il est possible que vous ayes besoin d'accéder au contexte d'un autre contrôleur.
			Si tel est le cas, Angular possède l'objet $rootScope qui permet d'accèder à l'ensemble des contextes présents dans votre page.


			- $watch

				Il est souvent intéressant d'observer les changements de notre modèle.

				Prenons l'example suivant. Admettons que nous souhaitions développer un module de reservation. Lorsqe ma facture est supérieur à 100€, je souhaite appliquer une promotion de 10%. 


				Voici un exemple :

				app.controller("BillCtrl", function($scope){
				    $scope.articles = [{"name": "Téléphone sans-fil", "quantity": 1, "price": "29.99"}, {"name": "Chargeur iPhone5", "quantity": 1, "price": "29.99"}];
				    $scope.total = function(){
				        var total = 0;
				        for(var i = 0; i < $scope.articles.length; i++){
				            total += $scope.articles[i].price * $scope.articles[i].quantity;
				        }
				        return total;
				    };
				    function calculateDiscount(newValue, oldValue, scope){
				        $scope.discount = (newValue > 100) ? newValue * 0.10 : 0;
				    };
				    
				    $scope.finalTotal = function(){
				        return $scope.total() - $scope.discount;   
				    };
				    
				    $scope.$watch($scope.total, calculateDiscount);
				});

				Remarquez l'utilisation de $watch. Il s'agit d'une fonction attachée à $scope qui va nous permettre d'observer certaines propriétés de votre modèle et de déclencher des opérations lorsque la valeur de ces propriétés changent.

				La spécification de la fonction est la suivante :

					$watch(watchFn, watchAction, deepWatch)

				Analysons les paramètres:

					- watchFN: la propriété de votre modèle que vous souhaitez observer. Ce paramètre peut-être soit une fonction, soit une expression.

					- watchAction: fonction ou expression qui sera appelée lorsque watchFn change.

					- deepWatch: ce paramètre est optionnel. Il s'agit d'un booléen qui lorsqu'il est vrai indique à Angular qu'il doit déclencher watchAction lorsque les sous-propriétés d'un objet changent. Ce paramètre est pratique lorsque vous souhaitez examiner l'ensemble des propriétés d'un tableau ou d'un objet.

				L'utilisation de $watch esttrès puissante et je vous encourage vivement à l'utiliser, mais attention aux performance qui peuvent parfois se dégrader. Dans la partie 4 de ce cours, je vous propose l'utilisation d'une extension Chrome qui vous permettre de debugger efficacement cotre code Angular. LEs questions de perfommance seront au RDV.




	5. Les directives

		Le code HTML que nou avons écrit est peuplé d'attributs comme ng-controller, ng-repeat, ng-app, ng-model
		Ce sont des directives, qui sont utilisé lorsque l'on souhaite modifer ou transfomer le DOM

		Il en existe plusieurs :

			- ngController: directive permettant d'attacher un controller à la vue
			- ngRepeat: directive permettant de répéter un template pour chaque élément d'une collection
			- ngModel: directive permettant de lier les input, textarea ou select à une propriété du contexte actuel

			ng-app est une directive très importante, c'est elle qui permet d'initialiser l'application.
			Placez la au niveau cd votre balise body ou html, et passez-lui le nom de l'application.
			Dabs cet exemple, on crée un module myApp. Tous les modules (controleus, services, directive) seront obligatoirement rattachés à ce module.

				<html>
				    <head>        
				    </head>
				    <body ng-app="myApp">
				        
				    </body>
				</html>


		- Créer une directive

			Il arrive souvent que l'on ai besoin de créer ces propres directives. PAr exemple lorsque l'on veut faire patienter l'utilisateur il peut être pertinent d'afficher un cursuer de chargement, il faudra une directive.

			Le nommage :

				la convention est : namespace